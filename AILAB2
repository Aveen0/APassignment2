{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOcYmP5Vs+nsf0X8A1KG9Sh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Aveen0/APassignment2/blob/main/AILAB2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8awn_iPS-0Uz",
        "outputId": "0bbaf7b2-a37d-450e-beec-9d136ab990e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "John\n",
            "12\n"
          ]
        }
      ],
      "source": [
        "class C1:\n",
        "  def __init__(Myobj, name, age):\n",
        "    Myobj.name=name\n",
        "    Myobj.age=age\n",
        "  def Printtt(abc):\n",
        "    print(abc.name)\n",
        "    print(abc.age)\n",
        "p1 =C1(\"John\", 36)\n",
        "p1.age=12; #modify\n",
        "p1.Printtt()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#NUMPY\n",
        "import numpy as np\n",
        "arr= np.array([1,2,3,4,5])\n",
        "print(arr)\n",
        "print(type(arr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2gIKNMrXmvoo",
        "outputId": "35fa1c2e-a80b-4620-a9c5-53cef92f6c05"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5]\n",
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#NUMPY\n",
        "import numpy as np\n",
        "#0-D Array\n",
        "A1=np.array(24)\n",
        "print(A1)\n",
        "#1-D Array\n",
        "A11=np.array([1,3,5,7])\n",
        "print(A11)\n",
        "#2-D Array\n",
        "A111=np.array([[1,2,3],[7,6,5]])\n",
        "print(A111)\n",
        "#3-D Array\n",
        "A1111=np.array([[[1,2,3],[4,5,6]],[[7,6,5],[3,2,1]]])\n",
        "print(A1111)\n",
        "#Checking Dimensions\n",
        "print(A1111.ndim)\n",
        "#High-Dimensions\n",
        "A2=np.array([1,2,3],ndmin=4)\n",
        "print(A2.ndim)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gwrF4cFMnyLp",
        "outputId": "f006bdb0-3402-4583-fc18-c5536103f882"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "24\n",
            "[1 3 5 7]\n",
            "[[1 2 3]\n",
            " [7 6 5]]\n",
            "[[[1 2 3]\n",
            "  [4 5 6]]\n",
            "\n",
            " [[7 6 5]\n",
            "  [3 2 1]]]\n",
            "3\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TASK2\n",
        "import numpy as np\n",
        "Arr1=np.array([0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5])\n",
        "print(Arr1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SrX2FuBGsk_y",
        "outputId": "764a2005-9b9e-401b-fc0f-59543e7ec099"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 5 5 5 5 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TASK3\n",
        "import numpy as np\n",
        "x= np.arange(10,22).reshape((3, 4))\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pmoWeFd3vjtL",
        "outputId": "ba24dd86-bf52-4c89-d232-8176ab28be7f"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[10 11 12 13]\n",
            " [14 15 16 17]\n",
            " [18 19 20 21]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TASK3\n",
        "import numpy as np\n",
        "import os\n",
        "x = np.arange(12).reshape(4, 3)\n",
        "print(x)\n",
        "header = 'col1 col2 col3'\n",
        "np.savetxt('temp.txt', x, fmt=\"%d\", header=header) \n",
        "result = np.loadtxt('temp.txt')\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YvxcbobOvpA3",
        "outputId": "560fb450-4df8-4c66-d454-7b67fd6150cf"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 0  1  2]\n",
            " [ 3  4  5]\n",
            " [ 6  7  8]\n",
            " [ 9 10 11]]\n",
            "[[ 0.  1.  2.]\n",
            " [ 3.  4.  5.]\n",
            " [ 6.  7.  8.]\n",
            " [ 9. 10. 11.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TASK4\n",
        "import numpy as np  \n",
        "A1 = np.array([[[1, 2, 2, 1],\n",
        "               [4, 3, 3, 4],\n",
        "               [6, 0, 0, 6],\n",
        "               [7, 3, 3, 7],\n",
        "               [3, 3, 3, 3]],\n",
        "              \n",
        "            [[1, 2, 2, 1],\n",
        "               [4, 3, 3, 4],\n",
        "               [6, 0, 0, 6],\n",
        "               [7, 3, 3, 7],\n",
        "               [3, 3, 3, 3]],\n",
        "              \n",
        "              [[1, 2, 2, 1],\n",
        "               [4, 3, 3, 4],\n",
        "               [6, 0, 0, 6],\n",
        "               [7, 3, 3, 7],\n",
        "               [3, 3, 3, 3]]]) \n",
        "print(\"Array:\")\n",
        "print(A1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y6m4MDbLwPEM",
        "outputId": "4ea147ae-8839-41f8-f7be-ae37b5fcee45"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Array:\n",
            "[[[1 2 2 1]\n",
            "  [4 3 3 4]\n",
            "  [6 0 0 6]\n",
            "  [7 3 3 7]\n",
            "  [3 3 3 3]]\n",
            "\n",
            " [[1 2 2 1]\n",
            "  [4 3 3 4]\n",
            "  [6 0 0 6]\n",
            "  [7 3 3 7]\n",
            "  [3 3 3 3]]\n",
            "\n",
            " [[1 2 2 1]\n",
            "  [4 3 3 4]\n",
            "  [6 0 0 6]\n",
            "  [7 3 3 7]\n",
            "  [3 3 3 3]]]\n"
          ]
        }
      ]
    }
  ]
}